// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sundroid.Homework.Persistence;

#nullable disable

namespace Sundroid.Homework.Persistence.Migrations
{
    [DbContext(typeof(DataCollectorDbContext))]
    [Migration("20250530123451_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Sundroid.Homework.Persistence.Entities.DataLogger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("DataLoggers");
                });

            modelBuilder.Entity("Sundroid.Homework.Persistence.Entities.Inverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataLoggerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DataLoggerId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Inverters");
                });

            modelBuilder.Entity("Sundroid.Homework.Persistence.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CycleTime")
                        .HasColumnType("int");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("InverterId", "Time")
                        .IsUnique();

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Sundroid.Homework.Persistence.Entities.Inverter", b =>
                {
                    b.HasOne("Sundroid.Homework.Persistence.Entities.DataLogger", null)
                        .WithMany()
                        .HasForeignKey("DataLoggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sundroid.Homework.Persistence.Entities.LogItem", b =>
                {
                    b.HasOne("Sundroid.Homework.Persistence.Entities.Inverter", null)
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sundroid.Homework.Persistence.Entities.ValueSet", "Values", b1 =>
                        {
                            b1.Property<int>("LogItemId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Cos")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Cos");

                            b1.Property<decimal>("EDay")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("EDay");

                            b1.Property<decimal>("ETotal")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("ETotal");

                            b1.Property<decimal>("Eac")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Eac");

                            b1.Property<int>("Error")
                                .HasColumnType("int")
                                .HasColumnName("Error");

                            b1.Property<decimal>("Fac")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Fac");

                            b1.Property<decimal>("Iac1")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Iac1");

                            b1.Property<decimal>("Iac2")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Iac2");

                            b1.Property<decimal>("Iac3")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Iac3");

                            b1.Property<decimal>("Ipv1")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv1");

                            b1.Property<decimal>("Ipv2")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv2");

                            b1.Property<decimal>("Ipv3")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv3");

                            b1.Property<decimal>("Ipv4")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv4");

                            b1.Property<decimal>("Ipv5")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv5");

                            b1.Property<decimal>("Ipv6")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv6");

                            b1.Property<decimal>("Ipv7")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv7");

                            b1.Property<decimal>("Ipv8")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Ipv8");

                            b1.Property<decimal>("Pac")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Pac");

                            b1.Property<decimal>("Qac")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Qac");

                            b1.Property<int>("Status")
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.Property<decimal>("Temp")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Temp");

                            b1.Property<decimal>("Uac1")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Uac1");

                            b1.Property<decimal>("Uac2")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Uac2");

                            b1.Property<decimal>("Uac3")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Uac3");

                            b1.Property<decimal>("Upv1")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv1");

                            b1.Property<decimal>("Upv2")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv2");

                            b1.Property<decimal>("Upv3")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv3");

                            b1.Property<decimal>("Upv4")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv4");

                            b1.Property<decimal>("Upv5")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv5");

                            b1.Property<decimal>("Upv6")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv6");

                            b1.Property<decimal>("Upv7")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv7");

                            b1.Property<decimal>("Upv8")
                                .HasPrecision(18, 4)
                                .HasColumnType("decimal(18,4)")
                                .HasColumnName("Upv8");

                            b1.HasKey("LogItemId");

                            b1.ToTable("LogItems");

                            b1.WithOwner()
                                .HasForeignKey("LogItemId");
                        });

                    b.Navigation("Values")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
